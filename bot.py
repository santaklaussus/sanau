from telegram import KeyboardButton, ReplyKeyboardMarkup, Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
import os
from telegram import InputFile
import json
import re
import threading
import schedule
import time
import io
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from pypdf import PdfReader 
import asyncio
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from datetime import datetime
import os
import time
import requests
import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_API")
prodavec_bin = os.getenv("prodavec_bin")
# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
DATA_PATH = "data"
USERS_FILE = "users.json"
ADMIN_ID = "1830637104"  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
(
    STATE_KEY,
    STATE_REGISTER_PHONE, STATE_REGISTER_PASSWORD,
    STATE_REGISTER_NAME, STATE_REGISTER_SURNAME,
    STATE_LOGIN_PHONE, STATE_LOGIN_PASSWORD
) = (
    "state",
    "register_phone", "register_password",
    "register_name", "register_surname",
    "login_phone", "login_password"
)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£—Ç–∏–ª–∏—Ç—ã
KASPI_API_TOKEN = os.getenv("KASPI_API")
MERCHANT_ID = os.getenv("MERCHANT_ID")
POLL_INTERVAL = 300





def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def reset_subscription_if_expired(user):
    end = user.get("subscription_end_date")
    if end and datetime.fromisoformat(end) <= datetime.now():
        user["paid_current_month"] = False
        user["subscription_end_date"] = None

def check_end_date():
    users = load_users()
    for user in users:
        end_date_str = user.get("subscription_end_date")  # —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ "2025-08-22 16:00"
        end_date = datetime.fromisoformat(end_date_str)

        now = datetime.now()

        if now >= end_date:
            print("–°—Ä–æ–∫ –∏—Å—Ç—ë–∫!")
            user["paid_current_month"] = False
            user["class"] = None
            save_users(users)
        else:
            print("–ï—â—ë –Ω–µ –∏—Å—Ç—ë–∫, –æ—Å—Ç–∞–ª–æ—Å—å:", end_date - now)
    

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é





def main_menu(update,context):
    clear_user_flags(context)
    phone = context.user_data.get("phone_number")
    users = load_users()
    user = next(u for u in users if u["phone_number"] == phone)
    if user.get("is_admin"):
        kb = [
                [InlineKeyboardButton("üë• –û–∫—É—à—ã–ª–∞—Ä", callback_data="admin_students")],
                [InlineKeyboardButton("–ö—É—Ä—Å—Ç—ã –æ–∑–≥–µ—Ä—Ç—É", callback_data="change_course")],
                [InlineKeyboardButton("üë§ –ú–µ–Ω–∏–Ω –ø—Ä–æ—Ñ–∏–ª–∏–º", callback_data="admin_profile")],
                [InlineKeyboardButton("–û–∫—É—à—ã–ª–∞—Ä–¥–∞–Ω —Å—É—Ä–∞–∫—Ç–∞—Ä",callback_data="student_questions")],
                [InlineKeyboardButton("üö™ –®—ã–≥—É", callback_data="logout")]
            ]
        
        return InlineKeyboardMarkup(kb)
    else:
        kb = []
        if user.get("class") is not None:
            kb.append([
                    InlineKeyboardButton("üìñ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses"),
                    InlineKeyboardButton("üìö –í—Å–µ –∫—É—Ä—Å—ã", callback_data="courses")
                ])
        else:
            kb.append([InlineKeyboardButton("üìö –í—Å–µ –∫—É—Ä—Å—ã", callback_data="courses")])
        kb.append([
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ])
        kb.append([InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="logout")])
        kb.append([InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º", callback_data="contact_teacher")])
        if "answer" in user:
            kb.append([InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",callback_data="see_answer_to_question")])
        return InlineKeyboardMarkup(kb)
    



# –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤–Ω–∏–∑—É
def with_back_to_menu(markup):
    buttons = markup.inline_keyboard
    buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(buttons)

# –•—ç–Ω–¥–ª–µ—Ä—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_user_flags(context)
    context.user_data["registering_phone_number"] = True

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contact_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MathUp*! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
     
async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_user_flags(context)
    
    context.user_data["login_phone_number"] = True

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contact_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üîê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞:",
        reply_markup=reply_markup
    )

async def contact_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = context.user_data.get(STATE_KEY)
    if context.user_data.get("registering_phone_number") == True:
        context.user_data["registering_phone_number"] = False
        return await handle_contact(update, context)
    if context.user_data.get("login_phone_number") == True:
        context.user_data["login_phone_number"] = False
        return await handle_login_contact(update, context)


async def handle_change_title(update:Update,context:ContextTypes.DEFAULT_TYPE):
    grade = context.user_data.get("edit").get("grade")
    lesson_number = context.user_data.get("edit").get("lesson_number")
    path = f"./data/grade_{grade}/lesson{lesson_number}/metadata.json"
    with open(path, "r", encoding='utf8') as f:
        data = json.load(f)
    data["lesson_title"] = update.message.text.strip()
    kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number}, –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")],
          [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(kb)
    with open(path, 'w', encoding='utf8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    await update.message.reply_text(f"–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å–∞ {grade}",reply_markup=markup)
    

async def handle_change_intro(update:Update,context:ContextTypes.DEFAULT_TYPE):
    grade = context.user_data.get("edit").get("grade")
    lesson_number = context.user_data.get("edit").get("lesson_number")
    path = f"./data/grade_{grade}/lesson{lesson_number}/metadata.json"
    with open(path, "r", encoding='utf8') as f:
        data = json.load(f)
    data["intro"] = update.message.text.strip()
    with open(path, 'w', encoding='utf8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")],
          [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"–ù–æ–≤–æ–µ –∏–Ω—Ç—Ä–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å–∞ {grade}", reply_markup=markup)

async def handle_contact_teacher(update:Update, context:ContextTypes.DEFAULT_TYPE):
    message = update.message.text 
    users = load_users()
    phone = context.user_data.get("phone_number")
    for user in users:
        if user.get("phone_number") == phone:
            user["question"] = message 
            break 
    save_users(users)
    kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
    await update.message.reply_text("–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤–æ–ø—Ä–æ—Å, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —É—á–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω")

async def handle_reply_to_student(update:Update, context:ContextTypes.DEFAULT_TYPE):
    phone = context.user_data["phone_to_reply"] 
    with open("users.json","r", encoding='utf8') as file:
        users = json.load(file)
    for user in users:
        if user["phone_number"] == phone:
            chat_id = user["user_id"]
    await context.bot.send_message(chat_id=chat_id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è:{update.message.text}")
    return

async def handle_change_course_title(update:Update, context:ContextTypes.DEFAULT_TYPE):
    edit_course = context.user_data.get("edit_course")
    grade = edit_course.get("grade")
    with open(f"./data/grade_{grade}/metadata.json",'r', encoding='utf8') as file:
        data = json.load(file)
    data["title"] = update.message.text 
    with open(f"./data/grade_{grade}/metadata.json",'w',encoding='utf8') as file:
        json.dump(data, file, ensure_ascii=False, indent=2)
        kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∞—Å—Å–∞ {grade}",callback_data=f"info_change_course_{grade}")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞—Å—Å–∞ {grade}",reply_markup=markup)


async def handle_change_course_description(update:Update,context:ContextTypes.DEFAULT_TYPE):
    edit_course = context.user_data.get("edit_course")
    grade = edit_course.get("grade")
    with open(f"./data/grade_{grade}/metadata.json",'r',encoding='utf8') as file:
        data = json.load(file)
    data["description"] = update.message.text 
    with open(f"./data/grade_{grade}/metadata.json",'w', encoding='utf8') as file:
        json.dump(data,file, ensure_ascii=False, indent=2)
    user = context.user_data.get("user")
    kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∞—Å—Å–∞ {grade}",callback_data=f"info_change_course_{grade}")],
          [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ {grade}", reply_markup=markup)



async def handle_change_course_price(update:Update, context:ContextTypes.DEFAULT_TYPE):
    edit_course = context.user_data.get("edit_course")
    grade = edit_course.get("grade")
    with open(f"./data/grade_{grade}/metadata.json",'r',encoding='utf8') as file:
        data = json.load(file)
    data["price"] = update.message.text 
    with open(f"./data/grade_{grade}/metadata.json",'w', encoding='utf8') as file:
        json.dump(data,file,ensure_ascii=False, indent=2)
    
    kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫–ª–∞—Å—Å–∞ {grade}",callback_data=f"info_change_course_{grade}")],
          [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
    markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ {grade}",reply_markup=markup)



async def handle_answer_for_student(update:Update,context:ContextTypes.DEFAULT_TYPE):
    phone_number = context.user_data.get("student_phone_number")
    users = load_users()
    for user in users:
        if user["phone_number"] == phone_number:
            user["answer"] = f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å:{user["question"]}, –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ:{update.message.text}" 
            del user["question"]

            break
    
    save_users(users)
    await update.message.reply_text("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")



async def message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    st = context.user_data.get(STATE_KEY)
    
    if context.user_data.get("registering_password") == True:
        # clear_user_flags(context)
        context.user_data["registering_password"] = False
        return await handle_register_password(update, context)
    if context.user_data.get("registering_name") == True:
        # clear_user_flags(context)
        context.user_data["registering_name"] = False
        return await handle_register_name(update, context)
    if context.user_data.get("registering_surname") == True:
        # clear_user_flags(context)
        context.user_data["registering_surname"] = False 
        return await handle_register_surname(update, context)
    if context.user_data.get("login_password") == True:
        # clear_user_flags(context)
        context.user_data["login_password"] = False
        return await handle_login_password(update, context)
    if context.user_data.get("edit", {}).get("ongoing") == True and context.user_data.get("edit", {}).get("action") == "title":
        # clear_user_flags(context)
        context.user_data["edit"]["ongoing"] = False
        return await handle_change_title(update,context)
    if context.user_data.get("edit",{}).get("ongoing") == True and context.user_data.get("edit",{}).get("action") == "intro":
        # clear_user_flags(context)
        context.user_data["edit"]["ongoing"] = False
        return await handle_change_intro(update,context)
    # if context.user_data.get("edit",{}).get("ongoing") == True and context.user_data.get("edit",{}).get("action") == "video":
    #     # clear_user_flags(context)
    #     context.user_data["edit"]["ongoing"] = False
    #     return await handle_new_video(update,context)
    if context.user_data.get("waiting_for_contact_teacher") == True:
        clear_user_flags(context)
        return await handle_contact_teacher(update,context)
    if context.user_data.get("waiting_for_reply_to_student"):
        clear_user_flags(context)
        return await handle_reply_to_student(update,context)
    
    if context.user_data.get("edit_course",{}).get("ongoing") == True and context.user_data.get("edit_course",{}).get("action") == "title":
        # clear_user_flags(context)
        context.user_data["edit_course"]["ongoing"] = False
        return await handle_change_course_title(update,context)
    
    if context.user_data.get("edit_course",{}).get("ongoing") == True and context.user_data.get("edit_course").get("action") == "description":
        # clear_user_flags(context)
        context.user_data["edit_course"]["ongoing"] = False
        return await handle_change_course_description(update,context)
    
    if context.user_data.get("edit_course",{}).get("ongoing") == True and context.user_data.get("edit_course",{}).get("action") == "price":
        # clear_user_flags(context)
        context.user_data["edit_course"]["ongoing"] = False
        return await handle_change_course_price(update,context)
    if context.user_data.get("waiting_for_answer_for_student") == True:
        # clear_user_flags(context)
        context.user_data["waiting_for_answer_for_student"] = False
        return await handle_answer_for_student(update,context)

    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_videos":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "video_links.json")
        video_links = [link.strip() for link in update.message.text.split(",") if link.strip()]

        # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(video_links, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω—ã",reply_markup=markup)

    #upload_practice_link
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_practice_link":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "practice_links.json")
        practice_links = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(practice_links, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É –∑–∞–ø–∏—Å–∞–Ω—ã",reply_markup=markup)

    #upload_homework_link
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_homework_link":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "homework_link.json")
        homework_link = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(homework_link, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–º–∞—à–∫—É –∑–∞–ø–∏—Å–∞–Ω–∞",reply_markup=markup)
    #upload_mistake_video
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_mistake_video":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "mistake_video_link.json")
        mistake_video_link = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(mistake_video_link, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–ö–∞—Ç–µ–º–µ–Ω –∂—É–º—ã—Å –≤–∏–¥–µ–æ—Å—ã —Å–∞–∫—Ç–∞–ª–¥—ã",reply_markup=markup)

    #upload_test_link
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_test_link":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "test_link.json")
        test_link = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(test_link, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–¢–µ—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∞ —Å–∞–∫—Ç–∞–ª—ã–Ω–¥—ã",reply_markup=markup)

    #
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_game_math_":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "game_links.json")
        game_math_links = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(game_math_links, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–û–π—ã–Ω —Å—Å—ã–ª–∫–∞–ª–∞—Ä—ã —Å–∞–∫—Ç–∞–ª—ã–Ω–¥—ã",reply_markup=markup)

    #upload_final_video
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_final_video":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "final_videos.json")
        final_video_links = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(final_video_links, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–í–∏–¥–µ–æ–ª–∞—Ä —Å–∞–∫—Ç–∞–ª—ã–Ω–¥—ã",reply_markup=markup)

    #upload_final_pdfs_
    if context.user_data.get("upload",{}).get("ongoing") == True and context.user_data.get("upload",{}).get("action") == "upload_final_pdfs":
        context.user_data["upload"]["ongoing"] = False 
        data = context.user_data["upload"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "final_pdfs.json")
        final_pdfs_links = [link.strip() for link in update.message.text.split(",") if link.strip()]
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(final_pdfs_links, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–ü–î–§—Ç–∞—Ä —Å–∞–∫—Ç–∞–ª—ã–Ω–¥—ã",reply_markup=markup)
    #edit_day
    if context.user_data.get("edit_day",{}).get("ongoing") == True and context.user_data.get("edit_day",{}).get("action") == "description":
        context.user_data["edit_day"]["ongoing"] = False 
        data = context.user_data["edit_day"]
        day = data["day"]
        week = data["week"]
        month = data["month"]
        grade = data["grade"]
        back = data["back"]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        json_path = os.path.join(folder, "description.json")
        description = update.message.text.strip()
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump({"description": description}, f, ensure_ascii=False, indent=2)
        
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–ö—É–Ω–Ω–∏–Ω —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã —Å–∞–∫—Ç–∞–ª—ã–Ω–¥—ã",reply_markup=markup)



    


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def clear_user_flags(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ context.user_data –≤—Å–µ –∫–ª—é—á–∏, –∫—Ä–æ–º–µ 'phone_number' –∏ 'is_logged'.
    """
    keys_to_keep = {"phone_number", "is_logged"}
    for key in list(context.user_data.keys()):
        if key not in keys_to_keep:
            context.user_data.pop(key, None)

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact.phone_number
    with open("users.json",'r', encoding='utf8') as file:
        users = json.load(file)

    for user in users:
        if user["phone_number"] == contact:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!–ó–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å /login")
            return
    context.user_data["phone_number"] = contact
    context.user_data["registering_password"] = True
    await update.message.reply_text("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")

async def handle_register_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["password"] = update.message.text.strip()
    context.user_data["registering_name"] = True
    await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–≤–µ–¥–∏—Ç–µ –∏–º—è.")

async def handle_register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["first_name"] = update.message.text.strip()
    context.user_data["registering_surname"] = True
    await update.message.reply_text("‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.")

async def handle_register_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update._effective_user.id
    users = load_users()
    users.append({
        "phone_number": context.user_data["phone_number"],
        "password": context.user_data["password"],
        "first_name": context.user_data["first_name"],
        "last_name": update.message.text.strip(),
        "class": None,
        "permission_to_next_month":True,
        "permission_to_buy_next_course":True,
        "current_month":0,
        "paid_current_month": False,
        "subscription_end_date": None,
        "progress": [],
        "finished_courses": []

    })
    save_users(users)
    context.user_data[STATE_KEY] = None
    # –í–æ—Ç –∑–¥–µ—Å—å —É–±–µ—Ä–∏ main_menu
    await update.message.reply_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞."
    )


# –í—Ö–æ–¥

async def handle_login_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.contact.phone_number
    context.user_data["phone_number"] = phone
    users = load_users()
    for u in users:
        if u["phone_number"] == phone:
            context.user_data["login_password"] = True
            await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
            return
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ /login")
    return

async def handle_login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):

    text = update.message.text.strip()
    phone = context.user_data.get("phone_number")
    with open("users.json",'r', encoding='utf8') as file:
        users = json.load(file)
        context.user_data["is_logged"] = False
    for user in users:
        if user["phone_number"] == phone and user["password"].strip() == text:
            context.user_data["is_logged"] = True
            kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
            context.user_data["user"] = user
            await update.message.reply_text("‚úÖ –í—ã –≤–æ—à–ª–∏!", reply_markup=main_menu(update,context))
    if context.user_data.get("is_logged") == False:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!–ó–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ /login")
        

    
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query
    await query.answer()
    data = query.data
    phone = context.user_data.get("phone_number")
    users = load_users()
    user = next(u for u in users if u["phone_number"] == phone)
    
    print("DEBUG callback_data =", data, "phone from context =", context.user_data.get("phone_number"))
    curr_user = next((u for u in users if u["phone_number"] == phone), None)

    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø—Ä–æ—Ñ–∏–ª—å
    if data == "main_menu":
        # query = update.callback_query
        await query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu(update, context)
        )
        return



    if data == "see_answer_to_question":
        phone = context.user_data.get("phone_number")
        users = load_users()
        user = next(u for u in users if u["phone_number"] == phone)
        answer = user["answer"]
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text(f"–í–æ—Ç –æ—Ç–≤–µ—Ç:{answer}", reply_markup=markup)


    if data == "student_questions":
        users = load_users()
        kb = []
        for user in users:
            if "question" in user:
                kb.append([InlineKeyboardButton(f"{user["first_name"]} {user["last_name"]}",callback_data=f"see_questions_{user["phone_number"]}")] )
        kb.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")])
        markup = InlineKeyboardMarkup(kb)

        await query.edit_message_text(".", reply_markup=markup)


                

    if data.startswith("see_questions_"):
        phone_number = data.split("_")[-1]
        users = load_users()
        for user in users:
            if user["phone_number"] == phone_number:
                question = user["question"]
        kb = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å",callback_data=f"answer_question_{phone_number}")]]
        kb.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")])
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text(f"–í–æ–ø—Ä–æ—Å –æ—Ç —É—á–µ–Ω–∏–∫–∞:{question}",reply_markup=markup)


    
    if data.startswith("answer_question_"):
        context.user_data["student_phone_number"] = data.split("_")[-1]
        context.user_data["waiting_for_answer_for_student"] = True
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç")
        



    if data == "change_course":
        
        kb = [

            [InlineKeyboardButton(f"{grade} –∫–ª–∞—Å—Å" , callback_data=f"change_course_{grade}")]
            for grade in range(5,12)

            ]
        kb.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")])
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup = markup)
        return  




    if data.startswith("change_course_"):
        grade = data.split("_")[-1]
        path = f"./data/grade_{grade}"
        os.makedirs(path, exist_ok=True)
        folders = len([d for d in os.listdir(path) if os.path.isdir(os.path.join(path,d))])
        kb = [
            [InlineKeyboardButton(f" {month_number + 1} –ê–π", callback_data=f"change_month_{month_number+1}_{grade}") ] for month_number in range(folders)
            
              ]
        kb.append([InlineKeyboardButton("–¢–∞–≥—ã –∞–π –∫–æ—Å—É",callback_data=f"add_next_month_{grade}")])
        kb.append([InlineKeyboardButton("–ö—É—Ä—Å—Ç—ã–Ω —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –æ–∑–≥–µ—Ä—Ç—É",callback_data=f"info_change_course_{grade}")])
        kb.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")])
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text("–ö–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –º–µ—Å—è—Ü–∞–º", reply_markup=markup)
        return  

    if data.startswith("change_month_"):
        context.user_data["inside_month"] = data
        month = data.split("_")[-2]
        grade = data.split("_")[-1]
        
        kb = [[InlineKeyboardButton(f"{week_number} –ê–ø—Ç–∞",callback_data=f"change_week_{week_number}_{month}_{grade}") for week_number in range(1,5)],
              [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]
              ]
            
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text(f"{month} –∞–π–¥—ã–Ω –∞–ø—Ç–∞–ª–∞—Ä—ã, {grade} –∫–ª–∞—Å—Å",reply_markup=markup)

    if data.startswith("change_week"):
        back = context.user_data.get("inside_month")
        context.user_data["inside_week"] = data
        week_number = data.split("_")[-3]
        month = data.split("_")[-2]
        grade = data.split("_")[-1]
        folder_of_the_week = f"./data/grade_{grade}/month{month}/week{week_number}"
        os.makedirs(folder_of_the_week, exist_ok=True)
        kb = [[InlineKeyboardButton(f"{day_number} –ö—É–Ω",callback_data=f"change_day_{day_number}_{week_number}_{month}_{grade}") for day_number in range(1,6)],
              [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text(f"{week_number} –ê–ø—Ç–∞—Å—ã–Ω—ã–Ω –º–∞–∑–º—É–Ω—ã, {month} –ê–π, {grade} –∫–ª–∞—Å—Å",reply_markup=markup)

    if data.startswith("change_day_"):
        back = context.user_data.get("inside_week")
        context.user_data["inside_day"] = data
        day_number = data.split("_")[-4]
        week_number = data.split("_")[-3]
        month = data.split("_")[-2]
        grade = data.split("_")[-1]
        kb = [[InlineKeyboardButton("–ö—É–Ω–Ω–∏–Ω –º–∞–∑–º—É–Ω—ã–Ω, —Å–∞–±–∞–∫—Ç–∞—Ä—ã–Ω –æ–∑–≥–µ—Ä—Ç—É",callback_data=f"upload_materials_{day_number}_{week_number}_{month}_{grade}")],
              [InlineKeyboardButton("–ö—É–Ω–Ω–∏–Ω —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –æ–∑–≥–µ—Ä—Ç—É",callback_data=f"change_description_day_{day_number}_{week_number}_{month}_{grade}")],
              [InlineKeyboardButton("–ö—É–Ω–Ω–∏–Ω –º–∞–∑–º—É–Ω—ã–Ω –∫–∞—Ä–∞—É",callback_data=f"see_materials_{day_number}_{week_number}_{month}_{grade}")],
              [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=markup)

    


    if data.startswith("change_description_day"):
        back = context.user_data.get("inside_day")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["edit_day"] = {
            "ongoing":True, 
            "action":"description",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back

        }
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

    if data.startswith("see_materials_"):
        back = context.user_data.get("inside_day")
        day = data.split("_")[-4]
        week = data.split("_")[-3]
        month = data.split("_")[-2]
        grade = data.split("_")[-1]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        
        if os.path.exists(folder):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ .json —Ñ–∞–π–ª—ã
            json_files = [f for f in os.listdir(folder) 
                        if f.endswith('.json') and os.path.isfile(os.path.join(folder, f))]
            
            if json_files:
                for file_name in json_files:
                    file_path = os.path.join(folder, file_name)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        if isinstance(data, dict) and "description" in data:
                            message_text = f"{file_name}\n{data['description']}"
                        else:
                            message_text = f"{file_name}\n{str(data)}"
                        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")],
                              [InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)]]
                        markup = InlineKeyboardMarkup(kb)
                        await query.message.reply_text(message_text,reply_markup=markup)
                        
                    except Exception as e:
                        await query.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_name}: {str(e)}")
            else:
                await query.message.reply_text("–í –ø–∞–ø–∫–µ –Ω–µ—Ç JSON —Ñ–∞–π–ª–æ–≤.")
        else:
            await query.message.reply_text("–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


    if data.startswith("upload_materials_"):
        back = context.user_data.get("inside_day")
        context.user_data["inside_day_upload"] = data
        split = data.split("_")
        day_number = int(split[-4])
        week_number = split[-3]
        month = split[-2]
        grade = split[-1]
        if day_number == 1 or day_number == 3:
            kb = [[InlineKeyboardButton("–í–∏–¥–µ–æ–ª–∞—Ä–≥–∞ —Å—Å—ã–ª–∫–∞–ª–∞—Ä–¥—ã —Å–∞–ª—É",callback_data=f"upload_video_links_{day_number}_{week_number}_{month}_{grade}")],
                  [InlineKeyboardButton("–ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã–∫ –∂—É–º—ã—Å—Ç–∞—Ä–≥–∞ —Å—Å—ã–ª–∫–∞–Ω—ã —Å–∞–ª—É",callback_data=f"upload_practice_link_{day_number}_{week_number}_{month}_{grade}")],
                   [InlineKeyboardButton("–£–π –∂—É–º—ã—Å—Ç—ã–Ω —Å—Å—ã–ª–∫–∞—Å—ã–Ω —Å–∞–ª—É",callback_data=f"upload_homework_link_{day_number}_{week_number}_{month}_{grade}")]
                   
                   
                   
                  
                  ]
            kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=markup)
        if day_number == 2 or day_number == 4:
            kb = [[InlineKeyboardButton("–ö–∞—Ç–µ–º–µ–Ω –∂—É–º—ã—Å –≤–∏–¥–µ–æ—Å—ã–Ω —Å–∞–ª—É",callback_data=f"upload_mistake_video_{day_number}_{week_number}_{month}_{grade}")],
                  [InlineKeyboardButton("–¢–µ—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∞–Ω—ã —Å–∞–ª—É",callback_data=f"upload_test_link_{day_number}_{week_number}_{month}_{grade}")],
                  [InlineKeyboardButton("–û–π—ã–Ω –µ—Å–µ–ø—Ç–µ—Ä–≥–µ —Å—Å—ã–ª–∫–∞–ª–∞—Ä —Å–∞–ª—É",callback_data=f"upload_game_math_{day_number}_{week_number}_{month}_{grade}")]
                  ]
            kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ",reply_markup=markup)
        if day_number == 5:
            kb = [[InlineKeyboardButton("–í–∏–¥–µ–æ–≥–∞ —Å—Å—ã–ª–∫–∞–Ω—ã —Å–∞–ª—É",callback_data=f"upload_final_video_{day_number}_{week_number}_{month}_{grade}")],
                  [InlineKeyboardButton("–ü–î–§—Ç–∞—Ä–¥—ã —Å–∞–ª—É",callback_data=f"upload_final_pdfs_{day_number}_{week_number}_{month}_{grade}")]
                  ]
            kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data=back)])
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ",reply_markup=markup)



    if data.startswith("upload_final_pdfs_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_final_pdfs",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–ü–î–§—Ç–∞—Ä–¥—ã —Å–∞–ª—ã–Ω—ã–∑")



    if data.startswith("upload_final_video_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_final_video",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–í–∏–¥–µ–æ–Ω—ã —Å–∞–ª—ã–Ω—ã–∑")

    
    if data.startswith("upload_game_math_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_game_math_",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–û–π—ã–Ω —Ç–µ—Å—Ç —Å—Å—ã–ª–∫–∞–ª–∞—Ä—ã–Ω –∂–∞–∑—ã–Ω—ã–∑")

    




    if data.startswith("upload_test_link_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_test_link",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–¢–µ—Å—Ç —Å—Å—ã–ª–∫–∞—Å—ã–Ω –∂–∞–∑—ã–Ω—ã–∑")




    if data.startswith("upload_mistake_video_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_mistake_video",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–ö–∞—Ç–µ–º–µ–Ω –∂—É–º—ã—Å –≤–∏–¥–µ–æ—Å—ã–Ω—ã–Ω —Å—Å—ã–ª–∫–∞—Å—ã–Ω –∂–∞–∑—ã–Ω—ã–∑")



    if data.startswith("upload_homework_link"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_homework_link",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")


    if data.startswith("upload_practice_link"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]
        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_practice_link",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É")
        



    if data.startswith("upload_video_links_"):
        back = context.user_data.get("inside_day_upload")
        split = data.split("_")
        day = split[-4]
        week = split[-3]
        month = split[-2]
        grade = split[-1]

        context.user_data["upload"] = {
            "ongoing":True,
            "action":"upload_videos",
            "day":day,
            "week":week,
            "month":month,
            "grade":grade,
            "back":back
        }
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø–æ –ø–æ—Ä—è–¥–∫—É")



    if data.startswith("change_video_"):
        seq = data.split("_")[-2]
        grade = data.split("_")[-1]
        context.user_data["edit"] = {
            "ongoing":True,
            "action":"video",
            "grade":grade,
            "lesson_number":seq
        }
        await update.callback_query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        return  




    if data.startswith("info_change_course_"):
        grade = data.split("_")[-1]
        path = f"./data/grade_{grade}"
        file_path = os.path.join(path,"metadata.json")
        if not os.path.exists(file_path):
            with open(file_path, 'w', encoding='utf8') as file:
                json.dump({}, file)
        
        with open(f"./data/grade_{grade}/metadata.json",'r',encoding='utf8') as file:
            data1 = json.load(file)
        kb = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫",callback_data=f"title_change_course_{grade}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",callback_data=f"description_change_course_{grade}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",callback_data=f"price_change_course_{grade}")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]
            
        ]
        title = data1.get("title","–ù–µ—Ç")
        description = data1.get("description","–ù–µ—Ç")
        price = data1.get("price","–ù–µ—Ç")
        
        markup = InlineKeyboardMarkup(kb)
        await query.edit_message_text(f"–î–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞ {grade}:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:{title}\n–û–ø–∏—Å–∞–Ω–∏–µ:{description}\n–¶–µ–Ω–∞:{price}", reply_markup=markup)
        return  

    if data.startswith("add_next_month_"):
        grade = data.split("_")[-1]
        grade_path = f"./data/grade_{grade}"
        lessons = [
            name for name in os.listdir(grade_path) if os.path.isdir(os.path.join(grade_path,name)) and name.startswith("month")
        ]
        month_numbers = [int(name.replace("month","")) for name in lessons if name.replace("month","").isdigit()]
        last_month = max(month_numbers, default=0)
        next_month = last_month + 1
        # await query.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫:{last_lesson}")

        nested_folder = f"./data/grade_{grade}/month{next_month}"
        kb = [[InlineKeyboardButton(f"{next_month} –ê–π–¥—ã–Ω, {grade} –∫–ª–∞—Å—Å—Ç—ã–Ω –º–∞–∑–º—É–Ω—ã–Ω –æ–∑–≥–µ—Ä—Ç—É",callback_data=f"change_month_{next_month}_{grade}")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
        os.makedirs(nested_folder, exist_ok=True)
        for i in range(1, 5):  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å week1..week4
            os.makedirs(os.path.join(nested_folder, f"week{i}"), exist_ok=True)

        # with open(metadata_path, "w", encoding="utf-8") as f:
        #     json.dump(lesson_metadata, f, ensure_ascii=False, indent=4)
        await query.edit_message_text("–ú–µ—Å—è—Ü —Å–æ–∑–¥–∞–Ω!",reply_markup=markup)
        return  

    if data.startswith("reply_to_"):
        context.user_data["phone_to_reply"] = data.split("_")[-1]
        context.user_data["waiting_for_reply_to_student"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É")
        return  
    




    if data.startswith("price_change_course"):
        grade = data.split("_")[-1]
        context.user_data["edit_course"] = {
            "ongoing":True,
            "action":"price",
            "grade":grade
        }
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")


    


    


    if data.startswith("description_change_course_"):
        grade = data.split("_")[-1]
        context.user_data["edit_course"] = {
            "ongoing":True, 
            "action":"description",
            "grade":grade
        }
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

    if data.startswith("title_change_course_"):
        grade = data.split("_")[-1]
        context.user_data["edit_course"] = {
            "ongoing":True,
            "action":"title",
            "grade":grade

        }
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        return  



    if data.startswith("see_video"):
        seq = data.split("_")[-2]
        grade = data.split("_")[-1]
        kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {seq} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{seq}_{grade}")],
              [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
        path = f"./data/grade_{grade}/lesson{seq}/video.mp4"
        if os.path.exists(path):
            with open(path, "rb") as video_file:
                    await update.callback_query.message.delete()
                    await context.bot.send_video(
                        chat_id=update.effective_chat.id,
                        video=video_file
                    )
            await update.callback_query.message.reply_text(".",reply_markup=markup)
            return  
        else:
            await update.callback_query.edit_message_text("–í–∏–¥–µ–æ –Ω–µ—Ç", reply_markup=markup)



    if data.startswith("change_hw_"):
        lesson_number = data.split("_")[-2]
        grade = data.split("_")[-1]
        context.user_data["edit"] = {
            "ongoing":True,
            "action":"homework",
            "grade":grade,
            "lesson_number":lesson_number
        }
        await update.callback_query.edit_message_text("–°–∫–∏–Ω—å—Ç–µ –Ω–æ–≤—É—é –¥–æ–º–∞—à–∫—É")
        return  


    if data.startswith("download_hw_"):
        lesson_number = data.split("_")[-2]
        grade = data.split("_")[-1]
        path = f"./data/grade_{grade}/lesson{lesson_number}/homework.pdf"
        kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")],
                  [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
        if os.path.isfile(path):
            await update.callback_query.message.delete()
            await update.callback_query.message.reply_document(document=open(path, 'rb'))
            await update.callback_query.message.reply_text(".", reply_markup=markup)
        else:
            await update.callback_query.edit_message_text("–î–æ–º–∞—à–∫–∏ –Ω–µ—Ç",reply_markup=markup)
            return



    if data.startswith("view_intro_"):
        lesson_number = data.split("_")[-2]
        grade = data.split("_")[-1]
        path = f"./data/grade_{grade}/lesson{lesson_number}/metadata.json"
        with open(path, "r", encoding='utf8') as f:
            data1 = json.load(f)
        kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")]]
        markup = InlineKeyboardMarkup(kb)
        await update.callback_query.message.reply_text(f"–í–æ—Ç –∏–Ω—Ç—Ä–æ –∫–ª–∞—Å—Å–∞ {grade} —É—Ä–æ–∫–∞ {lesson_number}:{data1["intro"]}", reply_markup=markup)

    if data.startswith("change_intro_"):
        lesson_number = data.split("_")[-2]
        grade = data.split("_")[-1]
        context.user_data["edit"] = {
            "ongoing":True,
            "action":"intro",
            "grade":grade,
            "lesson_number":lesson_number
        }
        await update.callback_query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–Ω—Ç—Ä–æ")
        return  


    if data.startswith("view_title_"):
        lesson_number = int(data.split("_")[-2])
        grade = data.split("_")[-1]
        path = f"./data/grade_{grade}/lesson{lesson_number}/metadata.json"
        with open(path,'r', encoding='utf8') as f:
            data1 = json.load(f)
        kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")]]
        markup = InlineKeyboardMarkup(kb)
        await update.callback_query.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞—Å—Å–∞ {grade} —É—Ä–æ–∫–∞ {lesson_number}:{data1["lesson_title"]}", reply_markup=markup)
        return  
    if data.startswith("change_title_"):
        grade = data.split("_")[-1]
        lesson_number = data.split("_")[-2]
        context.user_data["edit"] = {
            "ongoing":True,
            "action":"title",
            "grade":grade,
            "lesson_number":lesson_number
        }
        await update.callback_query.edit_message_text("–ù–∞–ø–∏—à–∏–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        return  


    




    if data == "admin_profile" and curr_user and curr_user.get("is_admin"):
        lines = [
            "üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*",
            f"–ò–º—è: {curr_user['first_name']} {curr_user['last_name']}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {curr_user['phone_number']}",
            "",
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
            "- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–æ–≤",
            "- –û—Ç–∫—Ä—ã—Ç–∏–µ –ª—é–±—ã—Ö —É—Ä–æ–∫–æ–≤ –ª—é–±–æ–º—É —É—á–µ–Ω–∏–∫—É",
            "- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–ø–ª–∞—Ç —É—á–µ–Ω–∏–∫–æ–≤"
        ]
        kb = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text("\n".join(lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
        return
        # –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
    if data == "admin_students":
        students = [u for u in users if not u.get("is_admin")]
        kb = []
        for u in students:
            kb.append([InlineKeyboardButton(f"{u['first_name']} {u['last_name']}", callback_data=f"admin_student_{u['phone_number']}")])
        kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:", reply_markup=InlineKeyboardMarkup(kb))
        return

    # –ö–Ω–æ–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ - –ø—Ä–æ—Ñ–∏–ª—å
    if data.startswith("admin_student_"):
        phone = data[len("admin_student_"):]
        u = next(u for u in users if u["phone_number"] == phone)
        lines = [
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {u['first_name']} {u['last_name']}",
            f"–¢–µ–ª: {u['phone_number']}",
            f"–ö–ª–∞—Å—Å: {u.get('class','-')}",
            f"–û–ø–ª–∞—á–µ–Ω: {'‚úîÔ∏è' if u.get('paid_current_month') else '‚ùå'}",
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {u.get('subscription_end_date') or '‚Äî'}",
            f"–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω: {'‚úÖ' if u.get('is_completed') == 'yes' else '‚è≥'}",
            f"–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:{u.get("finished_courses") if u.get("finished_courses") else "–ù–µ—Ç"}"
            "",
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º:",
        ]
        for p in u.get("progress", []):
            stat = ["üé•" if p.get("watched_video") else "‚ùå–≤–∏–¥–µ–æ", "üìÑ" if p.get("homework_done") else "‚ùå–î–ó"]
            lines.append(f"  –£—Ä–æ–∫ {p['sequence']}: {', '.join(stat)}")
        lines.append("")
        lines.append("üíµ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:")
        for p in u.get("payment_history", []):
            lines.append(f"{p['date'][:10]} ‚Äî {p['amount']} —Ç–≥")
        kb = [
            [InlineKeyboardButton("üü¢ –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É", callback_data=f"admin_openlessongrade_{phone}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_students")]
        ]
        await query.edit_message_text("\n".join(lines), reply_markup=InlineKeyboardMarkup(kb))
        return

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
    if data.startswith("admin_openlessongrade_"):
        phone = data[len("admin_openlessongrade_"):]
        grade_dirs = [d for d in os.listdir("data") if d.startswith("grade_")]
        kb = []
        for g in grade_dirs:
            grade_num = g.split("_")[1]
            kb.append([InlineKeyboardButton(f"–ö–ª–∞—Å—Å {grade_num}", callback_data=f"admin_openlesson_{phone}_{grade_num}")])
        kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_student_{phone}")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=InlineKeyboardMarkup(kb))
        return

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫
    if data.startswith("admin_openlesson_"):
        arr = data.split("_")
        phone = arr[2]
        grade = int(arr[3])

        target = next((u for u in users if u["phone_number"] == phone), None)
        if not target:
            await query.edit_message_text("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞")
            return
        

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É
        target["class"] = grade
        target["paid_current_month"] = True
        target["subscription_end_date"] = (
            datetime.now() + relativedelta(months=1)
        ).isoformat()
        save_users(users)
        await query.edit_message_text(
        f"‚úÖ –£—Ä–æ–∫–∏ –∫–ª–∞—Å—Å–∞ {grade} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è {target['first_name']} {target['last_name']}!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_students")]
        ])
    )
        return




    # –ö–Ω–æ–ø–∫–∞ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É
    if data.startswith("admin_giveaccess_"):
        _, phone, grade, seq = data.split("_")[2:]
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        u = next(u for u in users if u["phone_number"] == phone)
        prog = u.setdefault("progress", [])
        entry = next((p for p in prog if p["grade"] == int(grade) and p["sequence"] == int(seq)), None)
        if not entry:
            entry = {"grade": int(grade), "sequence": int(seq), "watched_video": True, "homework_done": True, "is_current": False}
            prog.append(entry)
        else:
            entry.update({"watched_video": True, "homework_done": True})
        save_users(users)
        await query.edit_message_text(f"–î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É {seq} –∫–ª–∞—Å—Å–∞ {grade} –æ—Ç–∫—Ä—ã—Ç!", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É", callback_data=f"admin_student_{phone}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]))
        return




    if data == "main_menu":
        
        user = next(u for u in users if u["phone_number"] == phone)
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(update,context))
        return

    if data == "logout":
        context.user_data.clear()
        await query.edit_message_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))
        return

    if data == "profile":
        user = next(u for u in users if u["phone_number"] == phone)
        reset_subscription_if_expired(user)
        save_users(users)
        lines = [
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:",
            f"–ò–º—è: {user['first_name']} {user['last_name']}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}",
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å, –∫–ª–∞—Å—Å: {user.get('class') or '‚Äî'}",
            f"–û–ø–ª–∞—á–µ–Ω: {'‚úîÔ∏è' if user.get('paid_current_month') else '‚ùå'}",
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.get('subscription_end_date') or '‚Äî'}",
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:{user.get("finished_courses")}"
            "",
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º:"
        ]
        prog = user.get("progress", [])
        if not prog:
            lines.append("  –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å")
        else:
            for e in prog:
                stat = ["üé•" if e.get("watched_video") else "‚ùå –≤–∏–¥–µ–æ", "üìÑ" if e.get("homework_done") else "‚ùå –î–ó"]
                cur = " (—Ç–µ–∫—É—â–∏–π)" if e.get("is_current") else ""
                lines.append(f"  –£—Ä–æ–∫ {e['sequence']}: {', '.join(stat)}{cur}")
        # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        lines.append("")
        lines.append("üíµ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:")
        payments = user.get("payment_history", [])
        if not payments:
            lines.append("  –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—Ç")
        else:
            for p in payments[-5:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π
                lines.append(f"  {p['date'][:10]} ‚Äî {p['amount']} —Ç–≥")
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text("\n".join(lines), reply_markup=kb)
        return


    if data == "help":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=kb)
        return

    # –ú–æ–∏ –∫—É—Ä—Å—ã
    if data == "my_courses":
        user = next(u for u in users if u["phone_number"] == phone)


        day = user["current_day"]
        week = user["current_week"]
        month = user["current_month"]
        grade = user["class"]

        
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"‚ñ∂", callback_data=f"start_lesson_{day}_{week}_{month}_{grade}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await query.edit_message_text(f"–ö–ª–∞—Å—Å : {grade}\n–¥–µ–Ω—å {day}\n–Ω–µ–¥–µ–ª—è {week}\n–º–µ—Å—è—Ü {month}", reply_markup=kb)
        return

    # –í—Å–µ –∫—É—Ä—Å—ã
    if data == "courses":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{g} –∫–ª–∞—Å—Å", callback_data=f"{g}_grade_summary")] for g in range(5, 12)
        ] + [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]] )
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=kb)
        return

    # –°–≤–æ–¥–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞
    if data.endswith("_grade_summary"):
        grade = int(data.split("_")[0])
        users = load_users()
        user = next((u for u in users if u["phone_number"] == phone), None)
        next_month = user["current_month"] + 1

        with open(os.path.join(DATA_PATH, f"grade_{grade}", "metadata.json"), "r", encoding="utf8") as f:
            meta = json.load(f)
        txt = f"*{meta['title']}*\n{meta['description']}\nüí∞ {meta['price']} —Ç–≥/–º–µ—Å"
        context.user_data["price"] = meta['price']
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ª–∏–±–æ –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π",	callback_data=f"pay_grade_{grade}_{next_month}" )],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await query.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb)
        return

    





    if data.startswith("pay_grade_"):
        grade = int(data.split("_")[-2])
        next_month = data.split("_")[-1]
        user = next(u for u in users if u["phone_number"] == phone)
        if user.get("permission_to_next_month") == False and user.get("class") == grade:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü!", reply_markup=main_menu(update,context))
            return
        if user.get("class") != grade and user.get("permission_to_buy_next_course") == False:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å!", reply_markup=main_menu(update,context))
            return
        
        user_id = query.from_user.id 
        phone = context.user_data.get("phone_number")
        link = "https://pay.kaspi.kz/pay/cxu5sykr"
        kb = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",url=link)]]
        markup = InlineKeyboardMarkup(kb)   
        context.user_data["waiting_for_check"] =  True
        context.user_data["grade"] = grade
        await query.edit_message_text("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –í–ê–ñ–ù–û - –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ –°–ö–ò–ù–¨–¢–ï –ß–ï–ö –î–õ–Ø –ü–†–û–í–ï–†–ö–ò",reply_markup=markup)
        
        return


    # –ó–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞
    if data.startswith("start_lesson_"):
        day = int(data.split("_")[-4])
        week = data.split("_")[-3]
        month = data.split("_")[-2]
        grade = data.split("_")[-1]
        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        # phone = context.user_data.get("phone_number")
        # users = load_users()
        # user = next((u for u in users if u["phone_number"] == phone), None)
        if day == 1 or day == 3:
            files_order = ["description.json", "video_links.json", "practice_links.json", "homework_link.json"]
            for file_name in files_order:
                file_path = os.path.join(folder, file_name)
                if not os.path.exists(file_path):
                    continue  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                with open(file_path, "r", encoding="utf-8") as f:
                    data_json = json.load(f)

                if file_name == "description.json":
                    # —Ç—É—Ç –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º description
                    message_text = data_json.get("description", "")
                    await query.message.reply_text(message_text)
                if file_name == "video_links.json":
                    for link in data_json:
                        await query.message.reply_text(f"–°–∞–±–∞–∫–∫–∞ —Å–∏–ª—Ç–µ–º–µ:{link}")
                if file_name == "practice_links.json":
                    for link in data_json:
                        await query.message.reply_text(f"–ü—Ä–∞–∫—Ç–∏–∫–∞–≥–∞ —Å—Å—ã–ª–∫–∞:{link}")
                if file_name == "homework_link.json":
                    for link in data_json:
                        await query.message.reply_text(f"–£–π –∂—É–º—ã—Å—ã:{link}")

                # else:
                #     # —Ç—É—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                #     for link in data_json:
                #         await query.message.reply_text(link)
        if day == 2 or day == 4:
            files_order = ["description.json", "mistake_video_link.json", "test_link.json", "game_links.json"]
            for file_name in files_order:
                file_path = os.path.join(folder, file_name)
                if not os.path.exists(file_path):
                    continue  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                with open(file_path, "r", encoding="utf-8") as f:
                    data_json = json.load(f)

                if file_name == "description.json":
                    # —Ç—É—Ç –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º description
                    message_text = data_json.get("description", "")
                    await query.message.reply_text(message_text)
                if file_name == "mistake_video_link.json":
                    for link in data_json:
                        await query.message.reply_text(f"–ö–∞—Ç–µ–º–µ–Ω –∂—É–º—ã—Å:{link}")

                if file_name == "test_link.json":
                    for link in data_json:
                        await query.message.reply_text(f"–¢–µ—Å—Ç–∫–µ —Å—Å—ã–ª–∫–∞:{link}")
                if file_name == "game_links.json":
                    for link in data_json:
                        await query.message.reply_text(f"–û–π—ã–Ω –µ—Å–µ–ø:{link}")
                # else:
                #     # —Ç—É—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                #     for link in data_json:
                #         await query.message.reply_text(link)
        if day == 5:
            files_order = ["description.json", "final_videos.json","final_pdfs.json"]
            for file_name in files_order:
                file_path = os.path.join(folder, file_name)
                if not os.path.exists(file_path):
                    continue  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                with open(file_path, "r", encoding="utf-8") as f:
                    data_json = json.load(f)

                if file_name == "description.json":
                    # —Ç—É—Ç –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º description
                    message_text = data_json.get("description", "")
                    await query.message.reply_text(message_text)
                else:
                    # —Ç—É—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                    for link in data_json:
                        await query.message.reply_text(link)
        kb = [[InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏–ª",callback_data=f"finished_{day}_{week}_{month}_{grade}")],
              [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]


        markup = InlineKeyboardMarkup(kb)
        
        await query.message.reply_text(".", reply_markup=markup)
            

            
            
    

    if data.startswith("finished_"):
        time = data.split("_")
        day = int(time[-4])
        week = int(time[-3])
        month = int(time[-2])
        grade = time[-1]
        next_month = int(month) + 1
        last_day = 5 
        last_week = 4
        grade_path = "./data/grade_5"
        months = [name for name in os.listdir(grade_path) 
          if os.path.isdir(os.path.join(grade_path, name)) and name.startswith("month")]
        last_month = len(months)
        print(f"last month: {last_month}")


        if month == last_month and week == last_week and day == last_day:
            user["permission_to_next_month"] = True 
            user["permission_to_buy_next_course"] = True
            save_users(users)
            kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]

            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫—É—Ä—Å!", reply_markup=markup)



        if week == last_week and day == last_day:
            user["permission_to_next_month"] = True 
            save_users(users)
            kb = [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Å–ª–µ–¥ –º–µ—Å—è—Ü",callback_data=f"pay_grade_{grade}_{next_month}")],
                  [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text(f"–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –º–µ—Å—è—Ü –Ω–æ–º–µ—Ä {month}",reply_markup=markup)

            return

        if day == last_day:
            user["current_day"] = 1
            user["current_week"] += 1
            save_users(users)
            kb = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"start_lesson_{1}_{week+1}_{month}_{grade}")]]
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text(".", reply_markup=markup)

        else:
            user["current_day"] += 1
            save_users(users)
            kb = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data=f"start_lesson_{day+1}_{week}_{month}_{grade}")]]
            markup = InlineKeyboardMarkup(kb)
            await query.message.reply_text(".", reply_markup=markup)








    # –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ
    if data.startswith("watched_"):
        _, grade, seq = data.split("_")
        grade, seq = int(grade), int(seq)
        for u in users:
            if u["phone_number"] == phone:
                for p in u.get("progress", []):
                    if p["grade"] == grade and p["sequence"] == seq and p.get("is_current"):
                        p["watched_video"] = True
        save_users(users)
        meta_hw = os.path.join(DATA_PATH, f"grade_{grade}", f"lesson{seq}", "metadata.json")
        with open(meta_hw, "r", encoding="utf8") as f:
            hw = json.load(f)["homework_file"]
        path = os.path.join(DATA_PATH, f"grade_{grade}", f"lesson{seq}", hw)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"done_{grade}_{seq}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ! –í–æ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:"
        )
        await context.bot.send_document(chat_id=update.effective_chat.id, document=open(path, "rb"))
        # 2. –ü–æ—Ç–æ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∫–Ω–æ–ø–∫–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –î–ó, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb
        )
        return


    if data == "contact_teacher":
        context.user_data["waiting_for_contact_teacher"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return  

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏
    if data.startswith("done_"):
        _, grade, seq = data.split("_")
        grade, seq = int(grade), int(seq)
        for u in users:
            if u["phone_number"] == phone:
                for p in u.get("progress", []):
                    if p["grade"]==grade and p["sequence"]==seq and p.get("is_current"):
                        p.update({"homework_done": True, "is_current": False})
        save_users(users)
        nxt = seq + 1
        nxt_meta = os.path.join(DATA_PATH, f"grade_{grade}", f"lesson{nxt}", "metadata.json")
        if os.path.exists(nxt_meta):
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ñ∂ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"start_lesson_{grade}_{nxt}" )],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await query.edit_message_text(f"üéâ –£—Ä–æ–∫ {seq} –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=kb)
        else:
            # –ü–æ–º–µ—á–∞–µ–º –∫—É—Ä—Å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            for u in users:
                if u["phone_number"] == phone and u.get("class") == grade:
                    u["progress"] = []
                    u["subscription_end_date"] = None 
                    u["paid_current_month"] = False 
                    u["class"] = None 
                    u["finished_courses"].append(grade)

                     # –∏–ª–∏ True, –µ—Å–ª–∏ —Ç–µ–±–µ —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ
            save_users(users)
            kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
            markup = InlineKeyboardMarkup(kb)
            await query.edit_message_text("üéì –ö—É—Ä—Å –ø—Ä–æ–π–¥–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ", reply_markup=markup)
        return

# async def admin_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     users = load_users()
#     user = next((u for u in users if u["phone_number"] == context.user_data.get("phone_number")), None)
#     if not user or not user.get("is_admin"):
#         await update.message.reply_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
#         return
#     msg = ["–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:"]
#     for u in users:
#         msg.append(f"{u['first_name']} {u['last_name']} ({u['phone_number']}) ‚Äî –∫–ª–∞—Å—Å: {u.get('class','-')}, –æ–ø–ª–∞—Ç–∞: {'‚úîÔ∏è' if u.get('paid_current_month') else '‚ùå'}")
#     await update.message.reply_text("\n".join(msg[:50]))

async def admin_student_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_users()
    user = next((u for u in users if u.get("phone_number") == str(update.effective_chat.get('username', None)) or u.get("phone_number") == context.user_data.get('phone_number')), None)
    if not user or not user.get("is_admin"):
        await update.message.reply_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /student_profile <–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞>")
        return
    phone = args[0]
    users = load_users()
    user = next((u for u in users if u["phone_number"] == phone), None)
    if not user:
        await update.message.reply_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    lines = [
        f"–ü—Ä–æ—Ñ–∏–ª—å: {user['first_name']} {user['last_name']}",
        f"–¢–µ–ª: {user['phone_number']}",
        f"–ö–ª–∞—Å—Å: {user.get('class','-')}",
        f"–û–ø–ª–∞—á–µ–Ω: {'‚úîÔ∏è' if user.get('paid_current_month') else '‚ùå'}",
        f"–î–æ: {user.get('subscription_end_date') or '‚Äî'}",
        f"–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω: {'‚úÖ' if user.get('is_completed') == 'yes' else '‚è≥'}",
        "",
        "–ü—Ä–æ–≥—Ä–µ—Å—Å:"
    ]
    for e in user.get("progress", []):
        stat = ["üé•" if e.get("watched_video") else "‚ùå–≤–∏–¥–µ–æ", "üìÑ" if e.get("homework_done") else "‚ùå–î–ó"]
        lines.append(f"–£—Ä–æ–∫ {e['sequence']}: {', '.join(stat)}")
    # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
    lines.append("–ü–ª–∞—Ç–µ–∂–∏:")
    for p in user.get("payment_history", []):
        lines.append(f"{p['date'][:10]} ‚Äî {p['amount']} —Ç–≥")
    await update.message.reply_text("\n".join(lines))


async def handle_new_homework(update:Update, context:ContextTypes.DEFAULT_TYPE):
    edit = context.user_data.get("edit")
    if not edit or edit.get("ongoing") != True or edit.get("action") != "homework":
        return
    
    doc = update.message.document
    file = await doc.get_file()

    grade = edit["grade"]
    lesson_number = edit["lesson_number"]
    path = f"./data/grade_{grade}/lesson{lesson_number}/homework.pdf"
    await file.download_to_drive(path)  
    context.user_data["edit"]["ongoing"] = False
    kb = [[InlineKeyboardButton(f"–û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å {grade}", callback_data=f"change_lesson_{lesson_number}_{grade}")]]
    markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text(f"–î–æ–º–∞—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–∫ {lesson_number} –∫–ª–∞—Å—Å–∞ {grade}!",reply_markup=markup)

async def admin_open_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_users()
    user = next((u for u in users if u.get("phone_number") == str(update.effective_chat.get('username', None)) or u.get("phone_number") == context.user_data.get('phone_number')), None)
    if not user or not user.get("is_admin"):
        await update.message.reply_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /open_lesson <–Ω–æ–º–µ—Ä_—Ç–µ–ª> <–∫–ª–∞—Å—Å> <—É—Ä–æ–∫>")
        return
    phone, grade, seq = context.args[0], int(context.args[1]), int(context.args[2])
    users = load_users()
    user = next((u for u in users if u["phone_number"] == phone), None)
    if not user:
        await update.message.reply_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    prog = user.setdefault("progress", [])
    entry = next((p for p in prog if p["grade"] == grade and p["sequence"] == seq), None)
    if not entry:
        entry = {"grade": grade, "sequence": seq, "watched_video": True, "homework_done": True, "is_current": False}
        prog.append(entry)
    else:
        entry.update({"watched_video": True, "homework_done": True})
    save_users(users)
    await update.message.reply_text("–£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞.")


async def handle_new_video(update:Update, context:ContextTypes.DEFAULT_TYPE):
    edit = context.user_data.get("edit_day")
    if edit and edit["ongoing"] == True:
        day = edit["day"]
        week = edit["week"]
        month = edit["month"]
        grade = edit["grade"]

        folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
        os.makedirs(folder, exist_ok=True)
        video = update.message.video
        file = await context.bot.get_file(video.file_id)
        file_path = os.path.join(folder, f"{video.file_unique_id}.mp4")
        await file.download_to_drive(file_path)
        kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=markup)




def read_pdf_text(pdf_bytes: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞."""
    try:
        with io.BytesIO(pdf_bytes) as f:
            reader = PdfReader(f)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
            return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
        return ""
    
async def handle_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_check"):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await update.message.document.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            pdf_bytes = await file.download_as_bytearray()
            kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
            markup = InlineKeyboardMarkup(kb)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
            pdf_text = read_pdf_text(pdf_bytes)
            # await update.message.reply_text(pdf_text)
            check_number = pdf_text.splitlines()[4].split()[-1]
            amount = pdf_text.splitlines()[3].split()[0]
            bin = pdf_text.splitlines()[5].split()[-1]
            # await update.message.reply_text(f"check:{check_number}\nbin:{bin}\namount:{amount}")
            with open("checks.json",'r', encoding='utf8') as file:
                checks = json.load(file)
            liar = False
            for check in checks:
                if check["number"] == check_number or prodavec_bin != bin or int(amount) < int(context.user_data.get('price')) :
                    await update.message.reply_text("–ù–µ —Ç–æ—Ç —á–µ–∫ –ª–∏–±–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–ª–∞—Ç—ã", reply_markup=markup)
                    liar = True
                    return
            if not liar:
                # await update.message.reply_text("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞",reply_markup=markup)
                with open("checks.json",'r', encoding='utf8') as file:
                    checks = json.load(file)
                checks.append({"number":check_number})
                with open("checks.json",'w', encoding='utf8') as file:
                    json.dump(checks, file, ensure_ascii=False, indent=2)
                users = load_users()
                phone = context.user_data.get("phone_number")
                user = next(u for u in users if u["phone_number"] == phone)

                grade = context.user_data.get("grade")
                user["current_month"] += 1
                user["current_week"] = 1
                user["current_day"] = 1
                user["permission_to_next_month"] = False 
                user["permission_to_buy_next_course"] = False
                
                user["class"] = grade
                # –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
                if "payment_history" not in user:
                    user["payment_history"] = []
                with open(os.path.join(DATA_PATH, f"grade_{grade}", "metadata.json"), "r", encoding="utf8") as f:
                    meta = json.load(f)
                amount = meta.get("price", 0)
                user["payment_history"].append({
                    "date": datetime.now().isoformat(),
                    "amount": amount
                })
                save_users(users)
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ñ∂ –ù–∞—á–∞—Ç—å –∫—É—Ä—Å", callback_data=f"start_lesson_1_1_1_{grade}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                await update.message.reply_text("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ!", reply_markup=kb)
                context.user_data["waiting_for_check"] = False
                return


                    


        except Exception as e:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF.")
            return

async def document_router(update:Update, context:ContextTypes.DEFAULT_TYPE):
        edit = context.user_data.get("edit_day")
        if edit and edit["ongoing"] == True:
            day = edit["day"]
            week = edit["week"]
            month = edit["month"]
            grade = edit["grade"]
            folder = f"./data/grade_{grade}/month{month}/week{week}/day{day}"
            os.makedirs(folder, exist_ok=True)

            # –ø–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = update.message.document
            file = await context.bot.get_file(document.file_id)
            file_path = os.path.join(folder, document.file_name)

            await file.download_to_drive(file_path)
            kb = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data="main_menu")]]
            markup = InlineKeyboardMarkup(kb)
            await update.message.reply_text(f"–§–∞–π–ª {document.file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã, –≤–∏–¥–µ–æ, –ª–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=markup)

        
    
        return

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

schedule.every(24).hours.do(check_end_date)

# –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_schedule, daemon=True).start()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("login", start_login))
app.add_handler(MessageHandler(filters.CONTACT, contact_router))
# app.add_handler(MessageHandler(filters.Document.ALL, document_router))
# app.add_handler(MessageHandler(filters.Document.ALL, handle_new_homework))
app.add_handler(MessageHandler(filters.VIDEO, handle_new_video))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_router))
app.add_handler(CallbackQueryHandler(handle_button))
# app.add_handler(CommandHandler("students", admin_students))
app.add_handler(CommandHandler("student_profile", admin_student_profile))
app.add_handler(CommandHandler("open_lesson", admin_open_lesson))
# app.add_handler(CommandHandler("menu",main_menu))
# asyncio.get_event_loop().create_task(periodic_reset())
app.add_handler(MessageHandler(filters.Document.ALL, handle_check))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
